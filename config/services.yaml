parameters:
    locale: 'en'

services:
  _defaults:
    autowire: true
    autoconfigure: true
    public: true
    bind:
      $queryBus:   '@messenger.bus.query'
      $commandBus: '@messenger.bus.command'
      $eventBus: '@messenger.bus.events'
      $queueProducer: '@old_sound_rabbit_mq.domain_event_producer'
      $consoleLogger: '@monolog.logger.console'
      $passwordEncoder: '@security.password_encoder'
      $wsRedisClient: '@websocket_redis_client'
      $apis:
        binance: '@Core\Infrastructure\Api\Binance\Binance'

  # ┌─────────────────────────┐
  # │ Application services    │
  # └─────────────────────────┘
  Core\Application\:
    resource: '../src/Core/Application/*/*DtoAssembler.php'

  # ┌─────────────────────────┐
  # │ Domain services         │
  # └─────────────────────────┘
  Core\Domain\Event\EventStore: '@Core\Infrastructure\Persistence\Repository\DoctrineEventStore'
  Core\Domain\User\UserFactory: '@Core\Infrastructure\Factory\UserFactory'
  Core\Domain\User\UserRepository: '@Core\Infrastructure\Persistence\Repository\DoctrineUserRepository'
  Core\Domain\Exchange\ExchangeRepository: '@Core\Infrastructure\Persistence\Repository\DoctrineExchangeRepository'
  Core\Domain\Order\OrderRepository: '@Core\Infrastructure\Persistence\Repository\DoctrineOrderRepository'
  Core\Domain\Credentials\CredentialsRepository: '@Core\Infrastructure\Persistence\Repository\DoctrineCredentialsRepository'
  Core\Domain\Ticker\TickerRepository: '@Core\Infrastructure\Persistence\Repository\DoctrineTickerRepository'
  Core\Application\Ticker\TickerApiFactory: '@Core\Infrastructure\Factory\TickerApiFactory'

  # ┌─────────────────────────┐
  # │ Infrastructure services │
  # └─────────────────────────┘
  Core\Infrastructure\Persistence\Repository\:
    resource: '../src/Core/Infrastructure/Persistence/Repository'

  Core\Infrastructure\Factory\:
    resource: '../src/Core/Infrastructure/Factory'

  Core\Infrastructure\Bus\:
    resource: '../src/Core/Infrastructure/Bus'

  Core\Infrastructure\EventSubscriber\:
    resource: '../src/Core/Infrastructure/EventSubscriber/*'

  Core\Infrastructure\Api\:
    resource: '../src/Core/Infrastructure/Api/*'

  Core\Infrastructure\Messaging\:
    resource: '../src/Core/Infrastructure/Messaging/*'

  React\EventLoop\Factory: ~

  websocket_stream_loop:
    class: 'React\EventLoop\LoopInterface'
    factory: 'React\EventLoop\Factory:create'

  websocket_redis_client:
    class: Predis\Async\Client
    arguments:
      - '%env(REDIS_WS_URL)%'
      - '@websocket_stream_loop'

  Core\Infrastructure\Security\CryptoService:
    arguments:
      $publicKey: '%env(CRYPTO_PUBLIC_KEY)%'
      $secretKey: '%env(CRYPTO_SECRET_KEY)%'

  GuzzleHttp\Client: ~

  # ┌─────────────────────────┐
  # │ UI services             │
  # └─────────────────────────┘
  Core\Ui\:
    resource: '../src/Core/Ui/*'
    exclude: '../src/Core/Ui/*/{Exception}'

  Core\Ui\Command\:
    resource: '../src/Core/Ui/Command'
    tags:
      - { name: console.command }
